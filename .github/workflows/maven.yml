name: Java CI 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: jfrogdev.site
  IMAGE_NAME: team1-docker-local

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
#     - name: Compile with Maven
#       run: mvn compile -s ./.m2/settings.xml
      
#     - name: Code Review with Maven
#       run: mvn pmd:pmd -s ./.m2/settings.xml
#     - name: Testing with Maven
#       run: mvn test -s ./.m2/settings.xml
#     - name: CoverageChecks with Maven
#       run: mvn cobertura:cobertura -Dcobertura.report.format=xml -s ./.m2/settings.xml
    - name: Build with Maven
      run: mvn package -s ./.m2/settings.xml --file pom.xml
      
    - name: Copy war file
      run: cp /home/runner/work/addressbook/addressbook/target/addressbook.war .
      
    - name: Deploy war to Artifactory
      run: mvn deploy -s ./.m2/settings.xml
      
#     - name: Build the Docker image
#       run: docker build . --file Dockerfile --tag ghcr.io/pramodhm112/maven-deploy-example/addressbook:0.1

#     - name: Docker meta
#       id: meta
#       uses: docker/metadata-action@v4.0.1
#       with:
#         images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}

    - name: Docker credentials
      run: echo ${{secrets.JFROG_TOKEN}} | docker login ${{env.REGISTRY}} -u ${{secrets.JFROG_USER}} --password-stdin 
      
    - name: Docker Build
      run: docker build -t addressbook:${{ github.sha }} .
    
    - name: Docker Images
      run: docker images
      
    - name: Docker Tag
      run: docker tag addressbook:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/addressbook:${{ github.sha }}
    
    - name: Docker Push
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/addressbook:${{ github.sha }}

#     - name: Build and push
#       uses: docker/build-push-action@v3
#       with:
#         context: .
#         push: ${{ github.event_name != 'pull_request' }}
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
        
        
#     - name: Docker Images
#       run: docker images
      
#     - name: Pushing the image on DockerHub
#       run: docker push ghcr.io/pramodhm112/maven-deploy-example/addressbook:0.1
        
#   sonar:
#     name: Test - SonarCloud Scan
#     runs-on: ubuntu-latest
#     needs: [build]

#     steps:
#       - uses: actions/checkout@v1
#       - name: Set up JDK 1.8
#         uses: actions/setup-java@v1
#         with:
#           java-version: 11
#       - name: SonarCloud Scan
#         run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_KEY }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GHE_AUTH }}
#   aritifacts:             
#     name: Publish Maven Artifacts
#     runs-on: ubuntu-latest
#     needs: [build, sonar]
    
#     steps:
#       - uses: actions/checkout@v1
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.8
#       - name: Publish artifact on GitHub Packages
#         run: mvn deploy -Dregistry=https://maven.pkg.github.com/DevTools-India -Dtoken=GHE_AUTH
#         env:
#          GITHUB_TOKEN: ${{secrets.GHE_AUTH}}  #npm_token
